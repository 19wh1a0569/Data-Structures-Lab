#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *link;
};
struct node *head=NULL ,*tail=NULL,*cur,*next,*prev;

void create()
{
	int n,i;
	printf("Enter how many no of nodes to be created:\n");
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		cur=(struct node*)malloc(sizeof(struct node));
		printf("Enter data:\n");
		scanf("%d",&(cur->data));
		cur->link=NULL;
		if(head==NULL)
			head=tail=cur;
		else
		{
			tail->link=cur;
			tail=cur;
		}
	}
}
void display()
{
	if (head==NULL)
		printf("list is empty\n");
	else{
		next=head;
		while(next != NULL){
			printf("%d->",next->data);
			next=next->link;
		}
	}
}
void traversal()
{
	if(head==NULL)
	printf("List is empty\n");
	else
	{
		next=head;
		while(next!=NULL)
		{
			printf("%d->",next->data);
			next=next->link;
		}
	}
}
void insert_before_node()
{
	int value;
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter data:\n");
	scanf("%d",&(cur->data));
	printf("Enter before which node we need to perform insertion:\n");
	scanf("%d",&value);
	next=head;
	while(next->data!=value && next!=NULL)
	{
		prev=next;
		next=next->link;
	}
	prev->link=cur;
	cur->link=next;
}
void insert_after_node()
{
	int value;
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter data:\n");
	scanf("%d",&(cur->data));
	printf("Enter after which node we need to perform insertion:\n");
	scanf("%d",&value);
	next=head;
	while(next->data!=value && next!=NULL)
		next=next->link;
	cur->link=next->link;
	next->link=cur;
}

void insert_at_begin()
{
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter data:\n");
	scanf("%d",&(cur->data));
	cur->link=head;
	head=cur;
}
void insert_at_end()
{
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter data:\n");
	scanf("%d",&(cur->data));
	cur->link=NULL;
	tail->link=cur;
	tail=cur;
}

void insert_at_position()
{
	int pos,c=1;
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter data:\n");
	scanf("%d",&(cur->data));
	printf("Enter position at which data should be inserted:\n");
	scanf("%d",&pos);
	next=head;
	while(c<pos)
	{
		prev=next;
		next=next->link;
		c++;
	}
	prev->link=cur;
	cur->link=next;
}
void delete_at_begin()
{
	cur=head;
	head=cur->link;
	cur->link=NULL;
	printf("Deleted element is %d\n",cur->data);
	free(cur);
}
void delete_at_end()
{
	cur=head;
	while(cur->link!=tail)
		cur=cur->link;
	cur->link=NULL;
	next=tail;
	printf("Deleted element is %d\n",next->data);
	free(next);
	tail=cur;
}
void delete_at_position()
{
	int pos,c=1;
	printf("Enter deletion of position:\n");
	scanf("%d",&pos);
	next=head;
	while(c<pos)
	{
		prev=next;
		next=next->link;
		c++;
	}
	prev->link=next->link;
	printf("Deleted element is %d\n",next->data);
	next->link=NULL;
	free(next);
}
void delete_before_node()
{
	int value;
	printf("Enter data before deletion should be performed:\n");
	scanf("%d",&value);
	next=head;
	while(next->link->data!=value)
	{
		prev=next;
		next=next->link;
	}
	prev->link=next->link;
	next->link=NULL;
	printf("Deleted element is %d\n",next->data);
	free(next);
}
void delete_after_node()
{
	int value;
	printf("Enter value after which deletion should be performed:\n");
	scanf("%d",&value);
	next=head;
	while(next->data!=value)
	{
		prev=next;
		next=next->link;
	}
	prev=next->link;
	next->link=prev->link;
	printf("Deleted data is %d\n",prev->data);
	prev->link=NULL;
	free(prev);
}
void reverse()
{
	int a[100];
	int i=0;
	cur=head;
	while(cur!=NULL)
	{
		a[i++]=cur->data;
		cur=cur->link;
	}
	while(i>=0)
	{
	printf("<-%d",a[i]);
	i--;
	}
}
